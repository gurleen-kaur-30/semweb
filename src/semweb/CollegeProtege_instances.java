package semweb;


import impl.*;


import java.util.Collection;

import org.protege.owl.codegeneration.CodeGenerationFactory;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.FactoryHelper;
import org.protege.owl.codegeneration.impl.ProtegeJavaMapping;
import org.protege.owl.codegeneration.inference.CodeGenerationInference;
import org.protege.owl.codegeneration.inference.SimpleInference;

import org.semanticweb.owlapi.model.OWLClass;
import org.semanticweb.owlapi.model.OWLOntology;
import org.semanticweb.owlapi.model.OWLOntologyStorageException;

/**
 * A class that serves as the entry point to the generated code providing access
 * to existing individuals in the ontology and the ability to create new individuals in the ontology.<p>
 * 
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: CollegeProtege_instances<br>
 * @version generated on Sat Apr 03 10:21:32 IST 2021 by prateksha
 */
public class CollegeProtege_instances implements CodeGenerationFactory {
    private OWLOntology ontology;
    private ProtegeJavaMapping javaMapping = new ProtegeJavaMapping();
    private FactoryHelper delegate;
    private CodeGenerationInference inference;

    public CollegeProtege_instances(OWLOntology ontology) {
	    this(ontology, new SimpleInference(ontology));
    }
    
    public CollegeProtege_instances(OWLOntology ontology, CodeGenerationInference inference) {
        this.ontology = ontology;
        this.inference = inference;
        javaMapping.initialize(ontology, inference);
        delegate = new FactoryHelper(ontology, inference);
    }

    public OWLOntology getOwlOntology() {
        return ontology;
    }
    
    public void saveOwlOntology() throws OWLOntologyStorageException {
        ontology.getOWLOntologyManager().saveOntology(ontology);
    }
    
    public void flushOwlReasoner() {
        delegate.flushOwlReasoner();
    }
    
    public boolean canAs(WrappedIndividual resource, Class<? extends WrappedIndividual> javaInterface) {
    	return javaMapping.canAs(resource, javaInterface);
    }
    
    public  <X extends WrappedIndividual> X as(WrappedIndividual resource, Class<? extends X> javaInterface) {
    	return javaMapping.as(resource, javaInterface);
    }
    
    public Class<?> getJavaInterfaceFromOwlClass(OWLClass cls) {
        return javaMapping.getJavaInterfaceFromOwlClass(cls);
    }
    
    public OWLClass getOwlClassFromJavaInterface(Class<?> javaInterface) {
	    return javaMapping.getOwlClassFromJavaInterface(javaInterface);
    }
    
    public CodeGenerationInference getInference() {
        return inference;
    }

    /* ***************************************************
     * Class http://www.semanticweb.org/prateksha/ontologies/2021/1/college#College
     */

    {
        javaMapping.add("http://www.semanticweb.org/prateksha/ontologies/2021/1/college#College", College.class, DefaultCollege.class);
    }

    /**
     * Creates an instance of type College.  Modifies the underlying ontology.
     */
    public College createCollege(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_COLLEGE, DefaultCollege.class);
    }

    /**
     * Gets an instance of type College with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public College getCollege(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_COLLEGE, DefaultCollege.class);
    }

    /**
     * Gets all instances of College from the ontology.
     */
    public Collection<? extends College> getAllCollegeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_COLLEGE, DefaultCollege.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/prateksha/ontologies/2021/1/college#Course
     */

    {
        javaMapping.add("http://www.semanticweb.org/prateksha/ontologies/2021/1/college#Course", Course.class, DefaultCourse.class);
    }

    /**
     * Creates an instance of type Course.  Modifies the underlying ontology.
     */
    public Course createCourse(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_COURSE, DefaultCourse.class);
    }

    /**
     * Gets an instance of type Course with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Course getCourse(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_COURSE, DefaultCourse.class);
    }

    /**
     * Gets all instances of Course from the ontology.
     */
    public Collection<? extends Course> getAllCourseInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_COURSE, DefaultCourse.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/prateksha/ontologies/2021/1/college#MTech
     */

    {
        javaMapping.add("http://www.semanticweb.org/prateksha/ontologies/2021/1/college#MTech", MTech.class, DefaultMTech.class);
    }

    /**
     * Creates an instance of type MTech.  Modifies the underlying ontology.
     */
    public MTech createMTech(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MTECH, DefaultMTech.class);
    }

    /**
     * Gets an instance of type MTech with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public MTech getMTech(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MTECH, DefaultMTech.class);
    }

    /**
     * Gets all instances of MTech from the ontology.
     */
    public Collection<? extends MTech> getAllMTechInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MTECH, DefaultMTech.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/prateksha/ontologies/2021/1/college#PhD
     */

    {
        javaMapping.add("http://www.semanticweb.org/prateksha/ontologies/2021/1/college#PhD", PhD.class, DefaultPhD.class);
    }

    /**
     * Creates an instance of type PhD.  Modifies the underlying ontology.
     */
    public PhD createPhD(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PHD, DefaultPhD.class);
    }

    /**
     * Gets an instance of type PhD with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public PhD getPhD(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PHD, DefaultPhD.class);
    }

    /**
     * Gets all instances of PhD from the ontology.
     */
    public Collection<? extends PhD> getAllPhDInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PHD, DefaultPhD.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/prateksha/ontologies/2021/1/college#Professor
     */

    {
        javaMapping.add("http://www.semanticweb.org/prateksha/ontologies/2021/1/college#Professor", Professor.class, DefaultProfessor.class);
    }

    /**
     * Creates an instance of type Professor.  Modifies the underlying ontology.
     */
    public Professor createProfessor(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PROFESSOR, DefaultProfessor.class);
    }

    /**
     * Gets an instance of type Professor with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Professor getProfessor(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PROFESSOR, DefaultProfessor.class);
    }

    /**
     * Gets all instances of Professor from the ontology.
     */
    public Collection<? extends Professor> getAllProfessorInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PROFESSOR, DefaultProfessor.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/prateksha/ontologies/2021/1/college#Student
     */

    {
        javaMapping.add("http://www.semanticweb.org/prateksha/ontologies/2021/1/college#Student", Student.class, DefaultStudent.class);
    }

    /**
     * Creates an instance of type Student.  Modifies the underlying ontology.
     */
    public Student createStudent(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_STUDENT, DefaultStudent.class);
    }

    /**
     * Gets an instance of type Student with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Student getStudent(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_STUDENT, DefaultStudent.class);
    }

    /**
     * Gets all instances of Student from the ontology.
     */
    public Collection<? extends Student> getAllStudentInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_STUDENT, DefaultStudent.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/prateksha/ontologies/2021/1/college#iMTech
     */

    {
        javaMapping.add("http://www.semanticweb.org/prateksha/ontologies/2021/1/college#iMTech", IMTech.class, DefaultIMTech.class);
    }

    /**
     * Creates an instance of type IMTech.  Modifies the underlying ontology.
     */
    public IMTech createIMTech(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_IMTECH, DefaultIMTech.class);
    }

    /**
     * Gets an instance of type IMTech with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public IMTech getIMTech(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_IMTECH, DefaultIMTech.class);
    }

    /**
     * Gets all instances of IMTech from the ontology.
     */
    public Collection<? extends IMTech> getAllIMTechInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_IMTECH, DefaultIMTech.class);
    }


}
